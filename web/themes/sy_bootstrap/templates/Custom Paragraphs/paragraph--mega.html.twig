{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
not paragraph.isPublished() ? 'paragraph--unpublished'
] 
%}
{% set tint_color = paragraph.field_para_secondary_color.value %}


<section {{ attributes.addClass(classes) }}>
    {% block content %}
        <div class="row {{ paragraph.field_para_fluid_container.value == "1" ? "full-width-row" }}">
            <div class="mega">
                <div class="mega-inner">
                        {% if paragraph.field_para_penta_icon.value %}
                            <i {% if tint_color %} style="background-color: {{ tint_color }};" {% endif %} class="sy-icons sy-icon-lg--{{ paragraph.field_para_penta_icon.value }}"></i>
                        {% endif %}
                        <h2 class="para-title">{{ content.field_para_title }}</h2>

                        {% if content.field_para_more[0] %}
                            <div class="more-text">
                                <a {% if tint_color %} style="color: {{ tint_color }};" {% endif %} href="{{ content.field_para_more[0]['#url'] }}">{{ content.field_para_more[0]['#title'] }} <i class="fas fa-angle-right"></i></a>
                            </div>
                        {% endif %}
                </div>
                <div class="mega-links">
                    {% if content.field_para_mega_link_blocks[0] %}

                        {% set count = paragraph.field_para_mega_link_blocks|length  %}
                        {% set width = 12/count %}
                        {% if count == 4 %}
                            {% set width = 6 %}
                        {% elseif count == 6 %}
                            {% set width = 6 %}
                        {% endif %}
                        {% if width < 4 %}
                            {% set width = 4 %}
                        {% endif %}
                        {% for key, item in content.field_para_mega_link_blocks if key|first != '#' %}
                            <div class="col-md-{{ width }} element--mega__mega-link-{{ key + 1 }} item">{{ item }}</div>
                        {% endfor %}
                    {% endif %}
                </div>
            </div>
        </div>
    {% endblock %}
</section>
