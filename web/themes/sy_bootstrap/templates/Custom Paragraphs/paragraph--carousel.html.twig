{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
not paragraph.isPublished() ? 'paragraph--unpublished'
] %}

{# Specify that we want to hide the content so we can print our fields individually #}

{{ content|without('field_para_slides','field_para_carousel_speed') }}

{# If Slide Interval field (field_sli) has value, add the data interval #}
{# We also add the Paragraph's id as the carousel id so we can allow multiple carousel on one page. (paragraph.id.value)" #}

<section {{ attributes.addClass(classes) }}>
    {% block content %}
        <div class="row {{ paragraph.field_para_fluid_container.value == "1" ? "full-width-row" }}">
            <div class="element element--layout-carousel carousel slide" id="myCarousel-{{ paragraph.id.value }}" data-ride="carousel"{% if content.field_para_carousel_speed %} data-interval="{{content.field_para_carousel_speed}}"{% endif %}>
                {# For the carousel indicators, we loop through the slide field #}
                {# We use Twig loop.first to set the active class, and the key to set the data-slide-to #}
                <ol class="carousel-indicators">
                    {% for key, item in content.field_para_slides if key|first != '#' %}
                        <li class="{% if loop.first %}active{% endif %}" data-slide-to="{{ key }}" data-target="#myCarousel-{{ paragraph.id.value }}"></li>
                    {% endfor %}
                </ol>
                {# We repeat the loop for the carousel items, adding a unique class using the key for the carousel controls #}
                <div class="carousel-inner" role="listbox">
                    {% for key, item in content.field_para_slides if key|first != '#' %}
                        <div class="element--layout-carousel__slide-{{ key + 1 }} item{% if loop.first %} active{% endif %}">{{ item }}</div>
                    {% endfor %}
                </div>
                {# Carousel controls are pretty spot on to Bootstrap defaults with the addition of the paragraph id #}
                <a class="left carousel-control" href="#myCarousel-{{ paragraph.id.value }}" role="button" data-slide="prev">
                    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="right carousel-control" href="#myCarousel-{{ paragraph.id.value }}" role="button" data-slide="next">
                    <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>
        </div>
    {% endblock %}
</section>
